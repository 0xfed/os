package:
  name: datadog-agent
  version: 7.53.0
  epoch: 7
  description: "Collect events and metrics from your hosts that send data to Datadog."
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      # - datadog-integrations-corentegrations-core
      - findutils
      - grep
      - libseccomp
      # - openjdk-11
      - python3
      - shadow

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-16
      - clang-16-dev
      - cmake
      - coreutils
      - curl
      # https://github.com/DataDog/datadog-agent/blob/95f4d66f5fb0c10940e0f9b8fc2ab33f0c6099f0/omnibus/config/software/datadog-agent-integrations-py3-dependencies.rb
      - freetds-dev
      # - gstatus # TODO: Required by gluster
      - gcc-12
      - go~1.21
      - llvm16
      - ninja
      - procps-dev
      - py3-boto3
      - py3-codeowners
      - py3-docker
      - py3-docker-squash
      - py3-dulwich
      - py3-invoke
      - py3-packaging
      - py3-pip
      - py3-reno
      - py3-requests
      - py3-toml
      - py3-urllib3
      - py3-wheel
      # - py3-yaml
      - python-3-dev
      - systemd-dev
      - wget
  environment:
    # CGo allows Go programs to call C code
    CGO_ENABLED: "1"
    # -Os optimizes the code for size
    # -I/build/datadog-agent/dev/include adds the directory to search
    # CGO_CFLAGS: "-Os -I${{targets.destdir}}/home/build/dev/include/"
    CGO_CFLAGS: "-Os -I${{targets.destdir}}/usr/include/"
    # Pass options to the linker. -L/build/datadog-agent/dev/lib adds directory to search for libraries
    # CGO_LDFLAGS: "-L${{targets.destdir}}/home/build/dev/lib/"
    CGO_LDFLAGS: "-L${{targets.destdir}}/usr/lib/"
    # disables generation of debugging information
    # omits the symbol table and debug information, further reducing the size of the binary.
    GOFLAGS: "-ldflags=-w -ldflags=-s"
    # sysprobe build wnats to depend exclusively on clang-12
    DD_SYSPROBE_SKIP_CLANG_CHECK: "true"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/DataDog/datadog-agent
      tag: ${{package.version}}
      expected-commit: 0eec38de4bfcd752cc10dfa700c06dd7bcdb3f36

  - uses: go/bump
    with:
      deps: github.com/moby/buildkit@v0.13.1 golang.org/x/net@v0.23.0
      replaces: github.com/mholt/archiver/v3=github.com/anchore/archiver/v3@v3.5.2

  # This step essentially replicates https://github.com/DataDog/datadog-agent/blob/main/omnibus/config/software/datadog-agent.rb
  - runs: |
      export PATH=$PATH:$GOPATH/bin
      mkdir -p "$GOPATH/src/github.com/DataDog/"
      ln -sf /home/build/ "$GOPATH"/src/github.com/DataDog/datadog-agent
      go mod tidy

      invoke deps

      invoke -e rtloader.make \
        --python-runtimes=3 \
        --install-prefix="${{targets.destdir}}/usr" \
        --cmake-options="\
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_INSTALL_LIBDIR=lib \
          -DCMAKE_CXX_FLAGS=-Os \
          -DCMAKE_C_FLAGS=-Os"
      invoke -e rtloader.install

      mkdir -p /usr/src
      inv -e system-probe.build --strip-object-files --no-bundle

      # include system-agent in the bundle
      invoke -e agent.build \
        --bundle process-agent \
        --bundle trace-agent \
        --bundle system-agent \
        --bundle security-agent \
        --exclude-rtloader \
        --python-runtimes 3 \
        --build-exclude=jmx

  - runs: |
      install -Dm755 bin/agent/agent ${{targets.destdir}}/usr/bin/agent
      # *-agent is just a symlink to the "agent" multicall
      ln -s agent ${{targets.destdir}}/usr/bin/process-agent
      ln -s agent ${{targets.destdir}}/usr/bin/security-agent
      ln -s agent ${{targets.destdir}}/usr/bin/trace-agent

      mkdir -p ${{targets.destdir}}/opt/datadog-agent/bin/agent/dist

      cp -r bin/agent/dist/checks ${{targets.destdir}}/opt/datadog-agent/bin/agent/dist/
      install -Dm644 bin/agent/dist/config.py ${{targets.destdir}}/opt/datadog-agent/bin/agent/dist/config.py
      cp -r bin/agent/dist/utils ${{targets.destdir}}/opt/datadog-agent/bin/agent/dist/
      cp -r bin/agent/dist/views ${{targets.destdir}}/opt/datadog-agent/bin/agent/dist/

      mkdir -p ${{targets.destdir}}/etc/datadog-agent/

      cp -r Dockerfiles/agent/s6-services ${{targets.destdir}}/etc/services.d
      cp -r Dockerfiles/agent/cont-init.d ${{targets.destdir}}/etc/cont-init.d
      install -Dm755 Dockerfiles/agent/entrypoint.sh ${{targets.destdir}}/bin/entrypoint.sh
      cp -r Dockerfiles/agent/entrypoint.d ${{targets.destdir}}/opt/entrypoints
      install -Dm644 Dockerfiles/agent/datadog-docker.yaml ${{targets.destdir}}/etc/datadog-agent/datadog-docker.yaml
      install -Dm644 Dockerfiles/agent/datadog-ecs.yaml ${{targets.destdir}}/etc/datadog-agent/datadog-ecs.yaml
      install -Dm644 bin/agent/dist/system-probe.yaml ${{targets.destdir}}/etc/datadog-agent/system-probe.yaml
      install -Dm644 bin/agent/dist/datadog.yaml ${{targets.destdir}}/etc/datadog-agent/datadog.yaml.example

      install -Dm755 Dockerfiles/agent/probe.sh ${{targets.destdir}}/probe.sh
      install -Dm755 Dockerfiles/agent/initlog.sh ${{targets.destdir}}/initlog.sh
      install -Dm755 Dockerfiles/agent/secrets-helper/readsecret.py ${{targets.destdir}}/readsecret.py
      install -Dm755 Dockerfiles/agent/secrets-helper/readsecret.sh ${{targets.destdir}}/readsecret.sh
      install -Dm755 Dockerfiles/agent/secrets-helper/readsecret_multiple_providers.sh ${{targets.destdir}}/readsecret_multiple_providers.sh

      cp -r bin/agent/dist/conf.d ${{targets.destdir}}/etc/datadog-agent/conf.d

      # Remove services for agents that are not built
      # TODO: We currently don't build the sysprobe agent
      rm -rf ${{targets.destdir}}/etc/services.d/sysprobe

      # Setup s3-overlay overrides
      mkdir -p ${{targets.destdir}}/etc/s6/init
      cp -r Dockerfiles/agent/init-stage3 ${{targets.destdir}}/etc/s6/init/init-stage3
      cp Dockerfiles/agent/init-stage3-host-pid ${{targets.destdir}}/etc/s6/init/init-stage3-host-pid

      mkdir -p ${{targets.destdir}}/usr/lib ${{targets.destdir}}/usr/include
      cp dev/lib/* ${{targets.destdir}}/usr/lib/
      cp dev/include/* ${{targets.destdir}}/usr/include/

subpackages:
  - name: datadog-agent-oci-compat
    dependencies:
      runtime:
        - bash
        - coreutils
        - datadog-agent-s6-overlay
        # - datadog-security-agent-policies

  - name: datadog-cluster-agent
    dependencies:
      runtime:
        - tzdata
        - libseccomp
    pipeline:
      - runs: |
          inv -e cluster-agent.build
          go generate cmd/cluster-agent/main.go

          install -Dm755 bin/datadog-cluster-agent/datadog-cluster-agent ${{targets.subpkgdir}}/usr/bin/datadog-cluster-agent
      - working-directory: Dockerfiles/cluster-agent
        runs: |
          mkdir -p ${{targets.subpkgdir}}/etc/datadog-agent/
          cp -r conf.d ${{targets.subpkgdir}}/etc/datadog-agent/

          cp ./install_info ${{targets.subpkgdir}}/etc/datadog-agent/
          cp ./datadog-cluster.yaml ${{targets.subpkgdir}}/etc/datadog-agent/

  - name: datadog-cluster-agent-oci-compat
    dependencies:
      runtime:
        - bash
        - coreutils
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/opt/datadog-agent/bin/
          ln -s /usr/bin/datadog-cluster-agent ${{targets.subpkgdir}}/opt/datadog-agent/bin/datadog-cluster-agent
          ln -s /usr/bin/datadog-cluster-agent ${{targets.subpkgdir}}/opt/datadog-agent/bin/agent
      - working-directory: Dockerfiles/cluster-agent
        runs: |
          install -Dm755 entrypoint.sh ${{targets.subpkgdir}}/entrypoint.sh
          install -Dm755 readsecret.sh ${{targets.subpkgdir}}/readsecret.sh
          install -Dm755 readsecret_multiple_providers.sh ${{targets.subpkgdir}}/readsecret_multiple_providers.sh

  - name: datadog-agent-fakeintake
    description: A fake intake server useful for testing purposes
    pipeline:
      - working-directory: test/fakeintake
        # This needs CGO_ENABLED=1, which we just so happen to inherit from the
        # main package
        pipeline:
          - uses: go/bump
            with:
              deps: golang.org/x/net@v0.23.0 google.golang.org/protobuf@v1.33.0 github.com/golang/protobuf@v1.5.4
          - uses: go/build
            with:
              packages: ./cmd/server
              output: fakeintake
              subpackage: "true"

  # The datadog-agent image uses a deprecated 3 year old version of s6-overlay
  # we don't want to maintain a package for. Instead, include the
  # raw release of that version of s6-overlay as a datadog-agent
  # subpackage, only to be used by image builders.
  - name: datadog-agent-s6-overlay
    description: "Deprecated s6-overlay for datadog-agent"
    options:
      # Hide this from our SCA and dag, this package should _only_ ever be used by datadog-agent
      no-provides: true
    pipeline:
      - runs: |
          S6_OVERLAY_VERSION=v2.2.0.3

          case $(uname -m) in
          aarch64)
            _arch="aarch64"
            expected_sha256="84f585a100b610124bb80e441ef2dc2d68ac2c345fd393d75a6293e0951ccfc5"
            ;;
          x86_64)
            _arch="amd64"
            expected_sha256="a7076cf205b331e9f8479bbb09d9df77dbb5cd8f7d12e9b74920902e0c16dd98"
            ;;
          *)
            echo "Unsupported architecture $(uname -m)"
            exit 1
            ;;
          esac

          curl -o s6-overlay.tgz -L https://github.com/just-containers/s6-overlay/releases/download/${S6_OVERLAY_VERSION}/s6-overlay-${_arch}.tar.gz

          echo "${expected_sha256}  s6-overlay.tgz" | sha256sum -c

          mkdir -p ${{targets.subpkgdir}}/
          tar -xvzf s6-overlay.tgz -C ${{targets.subpkgdir}}/

          # Since this is essentially a hard fork only for datadog, we can do this without issue
          # https://github.com/DataDog/datadog-agent/blob/f20521b4b0b05ad83314e3fc353ecbbe7e3e69a0/Dockerfiles/agent/Dockerfile#L200
          mv ${{targets.subpkgdir}}/etc/s6/init/init-stage3 ${{targets.subpkgdir}}/etc/s6/init/init-stage3-original

update:
  enabled: true
  github:
    identifier: DataDog/datadog-agent
  ignore-regex-patterns:
    - "lambda-extension.*"

test:
  environment:
    contents:
      packages:
        - datadog-agent-fakeintake
  pipeline:
    - runs: |
        export PATH=$PATH:/opt/datadog-agent/bin/agent

        cat > /etc/datadog-agent/datadog.yaml <<EOF
        api_key: "test"
        dd_url: "http://localhost:80"
        EOF

        export DD_HOSTNAME_FILE=/etc/hostname
        agent check uptime
